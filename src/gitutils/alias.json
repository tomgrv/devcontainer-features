{
    "abort": {
        "cmd": "git rebase --abort",
        "help": "Abort an ongoing rebase."
    },
    "amend": {
        "cmd": "git diff-index --cached --quiet HEAD && exit 1 || git commit --amend --reset-author -C HEAD",
        "help": "Amend the last commit if there are staged changes."
    },
    "beta": {
        "cmd": "git release-beta",
        "help": "Run release-beta command."
    },
    "cleanup": {
        "cmd": "git stash save --include-untracked  --keep-index; git clean --force -d -x -e \".env*\"; git stash apply --index; git stash drop",
        "help": "Stash all changes, clean untracked files except .env*, and restore stash."
    },
    "conflict": {
        "cmd": "git diff --name-only --diff-filter=U",
        "help": "List files with merge conflicts."
    },
    "continue": {
        "cmd": "git checkout -- . && git rebase --continue",
        "help": "Restore all files and continue a rebase."
    },
    "dt": {
        "cmd": "git tag -l \"$1\" | xargs -r -n 1 sh -c 'git push --delete origin \"\\$0\"; git tag -d \"\\$0\"'",
        "help": "Delete a tag locally and remotely."
    },
    "editLast": {
        "cmd": "git commit --amend --edit",
        "help": "Edit the last commit message and content."
    },
    "feat": {
        "cmd": "git flow feature start $1",
        "help": "Start a new git flow feature branch."
    },
    "fixable": {
        "cmd": "git log --oneline $(git rev-parse --abbrev-ref --symbolic-full-name @{u} || git merge-base HEAD develop)..HEAD",
        "help": "Show commits ahead of upstream."
    },
    "fixAliases": {
        "cmd": "git config remove-section --global alias; git config remove-section  --local alias",
        "help": "Remove all git aliases from global/local config."
    },
    "fixAuthor": {
        "cmd": "git config --global --remove-section user; git getcommit -f $1 | xargs -I {} sh -c 'git config user.name $(git log -1 --pretty=format:'%an' {}); git config user.email $(git log -1 --pretty=format:'%ae' {})'",
        "help": "Set user.name and user.email to specified commit's author."
    },
    "fixMode": {
        "cmd": "git fix mode",
        "help": "Restore file mode changes from diff."
    },
    "forceable": {
        "cmd": "git log --oneline $(echo $(git rev-parse --abbrev-ref --symbolic-full-name @{u} || git merge-base HEAD develop;git log --merges --first-parent -1 --pretty=%h)| tail -1)..HEAD $*",
        "help": "Show commits since last merge or upstream."
    },
    "fu": {
        "cmd": "git fix up",
        "help": "Fix up the specified commit with staged changes."
    },
    "go": {
        "cmd": "git commit -m \"$1\" --all",
        "help": "Commit all changes with a message."
    },
    "hfix": {
        "cmd": "git release-hotfix",
        "help": "Run release-hotfix command."
    },
    "histo": {
        "cmd": "git log --oneline $(git log --merges --first-parent -1 --pretty=%h) $*",
        "help": "Show log since last merge."
    },
    "ignore": {
        "cmd": "grep -qxF \"$1\" .gitignore || echo \"$1\" >>.gitignore && git rm --cached \"$1\" 2>/dev/null",
        "help": "Add file to .gitignore and untrack it."
    },
    "initFrom": {
        "cmd": "git clone --origin template --branch master --depth 1 -- $1 $2 && cd $2 && git branch -m master template && git checkout -b master && git checkout -b develop",
        "help": "Clone as template, create master and develop branches."
    },
    "isChanged": {
        "cmd": "git diff --name-only HEAD@{1} HEAD | grep -q \"^$1\" && exit 0 || exit 1",
        "help": "Check if file changed between last two HEADs."
    },
    "isDirty": {
        "cmd": "git diff --name-only | grep -q \"^$1\" && exit 0 || exit 1",
        "help": "Check if file has unstaged changes."
    },
    "isFixup": {
        "cmd": "git log -1 --pretty=%s | grep -q fixup! && exit 0 || exit 1",
        "help": "Check if last commit is a fixup commit."
    },
    "isRebase": {
        "cmd": "git rev-parse --git-dir | grep -q rebase-merge || git rev-parse --git-dir | grep -q rebase-apply",
        "help": "Check if a rebase is in progress."
    },
    "pf": {
        "cmd": "git push --force-with-lease $1",
        "help": "Push with force-with-lease."
    },
    "pn": {
        "cmd": "git push --no-verify",
        "help": "Push without running pre-push hooks."
    },
    "prod": {
        "cmd": "git release-prod",
        "help": "Run release-prod command."
    },
    "refresh": {
        "cmd": "git stash save --keep-index --include-untracked  && git reset --hard $(git rev-parse --abbrev-ref --symbolic-full-name @{u})",
        "help": "Stash, reset to upstream, and restore stash."
    },
    "renameTag": {
        "cmd": "set -e;git tag $2 $1; git tag -d $1;git push origin :refs/tags/$1;git push --tags",
        "help": "Rename a tag locally and remotely."
    },
    "rtag": {
        "cmd": "git release-tags $1",
        "help": "Create and push an annotated tag according to gitversion, make all subtags follow this tag if not a pre-release."
    },
    "stack": {
        "cmd": "git diff-index --cached --quiet HEAD || git commit --amend --reset-author --no-edit --no-verify -C HEAD",
        "help": "Amend last commit without editing message."
    },
    "sync": {
        "cmd": "git fetch --progress --prune --recurse-submodules=no origin && git stash save --keep-index --include-untracked && git merge --ff-only @{u} && git stash pop --index || git stash drop",
        "help": "Fetch, stash, fast-forward merge, and restore stash."
    },
    "undo": {
        "cmd": "git reset --soft HEAD^ --",
        "help": "Undo last commit, keep changes staged."
    }
}
