{
    "amend": "git diff-index --cached --quiet HEAD || git commit --amend -C HEAD",
    "beta": "git release-beta",
    "cleanup": "git stash save --include-untracked  --keep-index; git clean --force -d -x -e \".env*\"; git stash apply --index; git stash drop",
    "co": "git commit -m \"$1\"",
    "conflict": "git diff --name-only --diff-filter=U",
    "continue": "git checkout -- . && git rebase --continue",
    "crush": "git stash save --keep-index --include-untracked  && git reset --hard $(git rev-parse --abbrev-ref --symbolic-full-name @{u})",
    "edit": "git commit --amend --edit",
    "fixable": "git log --oneline $(git rev-parse --abbrev-ref --symbolic-full-name @{u})..HEAD",
    "forceable": "git log --oneline $(echo $(git rev-parse --abbrev-ref --symbolic-full-name @{u};git log --merges --first-parent -1 --pretty=%h)| tail -1)..HEAD $*",
    "go": "git commit -m \"$1\" --all",
    "hfix": "git release-hotfix",
    "histo": "git log --oneline $(git log --merges --first-parent -1 --pretty=%h) $*",
    "ignore": "grep -qxF \"$1\" .gitignore || echo \"$1\" >>.gitignore && git rm --cached \"$1\" 2>/dev/null",
    "initFrom": "git clone --origin template --branch master --depth 1 -- $1 $2 && cd $2 && git branch -m master template && git checkout -b master && git checkout -b develop",
    "isChanged": "git diff --name-only HEAD@{1} HEAD | grep -q \"^$1\" && exit 0 || exit 1",
    "isDirty": "git diff --name-only | grep -q \"^$1\" && exit 0 || exit 1",
    "isFixup": "git log -1 --pretty=%s | grep -q fixup! && exit 0 || exit 1",
    "isRebase": "git rev-parse --git-dir | grep -q rebase-merge || git rev-parse --git-dir | grep -q rebase-apply",
    "permission-reset": "git diff -p -R --no-color | grep -E '^(diff|(old|new) mode)' --color=never | git apply",
    "prod": "git release-prod",
    "renameTag": "set -e;git tag $2 $1; git tag -d $1;git push origin :refs/tags/$1;git push --tags",
    "stack": "git commit --amend --no-verify -C HEAD",
    "sync": "git fetch --progress --prune --recurse-submodules=no origin && git stash save --keep-index --include-untracked && git merge --ff-only @{u} && git stash pop --index || git stash drop",
    "undo": "git reset --soft HEAD^ --"
}
